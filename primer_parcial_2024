```sql
-- ======================================================
-- SCRIPT DE IMPLEMENTACIÓN FÍSICA - MARKETPLACE ARTESANAL
-- 1er Parcial Bases de Datos I - 2024
-- Versión CORREGIDA: reseña asociada a detalle_venta
-- ======================================================

-- 1. TABLA: categoria_producto
CREATE TABLE categoria_producto (
    codigo_categoria INT IDENTITY(1,1) PRIMARY KEY,
    nombre_categoria VARCHAR(100) NOT NULL UNIQUE
        CONSTRAINT UNQ_nombre_categoria UNIQUE
);
GO

-- 2. TABLA: material_fabricacion
CREATE TABLE material_fabricacion (
    codigo_material INT IDENTITY(1,1) PRIMARY KEY,
    nombre_material VARCHAR(100) NOT NULL UNIQUE
        CONSTRAINT UNQ_nombre_material UNIQUE
);
GO

-- 3. TABLA: vendedor
CREATE TABLE vendedor (
    codigo_vendedor INT IDENTITY(1,1) PRIMARY KEY,
    nombre_completo VARCHAR(200) NOT NULL,
    cuit VARCHAR(13) NOT NULL
        CONSTRAINT UNQ_cuit_vendedor UNIQUE,
    fecha_nacimiento DATE NOT NULL,
    correo_electronico VARCHAR(255) NOT NULL
        CONSTRAINT UNQ_correo_vendedor UNIQUE,

    -- Restricción: edad >= 18 al momento de alta
    CONSTRAINT CHK_edad_vendedor CHECK (DATEDIFF(YEAR, fecha_nacimiento, GETDATE()) >= 18)
);
GO

-- 4. TABLA: cliente
CREATE TABLE cliente (
    codigo_cliente INT IDENTITY(1,1) PRIMARY KEY,
    dni VARCHAR(8) NOT NULL
        CONSTRAINT UNQ_dni_cliente UNIQUE,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    domicilio VARCHAR(255) NOT NULL,
    ciudad VARCHAR(100) NOT NULL,
    correo_electronico VARCHAR(255) NOT NULL
        CONSTRAINT UNQ_correo_cliente UNIQUE,
    telefono VARCHAR(20) NULL
        CONSTRAINT UNQ_telefono_cliente UNIQUE -- Opcional, pero único si existe
);
GO

-- 5. TABLA: producto
CREATE TABLE producto (
    codigo_producto INT IDENTITY(1,1) PRIMARY KEY,
    nombre_producto VARCHAR(200) NOT NULL,
    descripcion TEXT NULL, -- opcional
    precio DECIMAL(10,2) NOT NULL,
    status VARCHAR(10) NOT NULL
        CONSTRAINT CHK_status_producto CHECK (status IN ('activa', 'pausada')),
    fecha_publicacion DATE NOT NULL
        CONSTRAINT DF_fecha_publicacion DEFAULT GETDATE(),
    codigo_vendedor INT NOT NULL,
    codigo_categoria INT NOT NULL,

    -- Claves foráneas
    CONSTRAINT FK_producto_vendedor FOREIGN KEY (codigo_vendedor) REFERENCES vendedor(codigo_vendedor),
    CONSTRAINT FK_producto_categoria FOREIGN KEY (codigo_categoria) REFERENCES categoria_producto(codigo_categoria)
);
GO

-- 6. TABLA: producto_material (Resuelve M:N entre Producto y Material)
CREATE TABLE producto_material (
    codigo_producto INT NOT NULL,
    codigo_material INT NOT NULL,
    porcentaje DECIMAL(5,2) NOT NULL
        CONSTRAINT CHK_porcentaje_material CHECK (porcentaje > 0 AND porcentaje <= 100),

    -- Clave primaria compuesta
    CONSTRAINT PK_producto_material PRIMARY KEY (codigo_producto, codigo_material),

    -- Claves foráneas
    CONSTRAINT FK_pm_producto FOREIGN KEY (codigo_producto) REFERENCES producto(codigo_producto) ON DELETE CASCADE,
    CONSTRAINT FK_pm_material FOREIGN KEY (codigo_material) REFERENCES material_fabricacion(codigo_material)
);
GO

-- 7. TABLA: venta
CREATE TABLE venta (
    numero_venta INT IDENTITY(1,1) PRIMARY KEY,
    fecha_venta DATE NOT NULL
        CONSTRAINT DF_fecha_venta DEFAULT GETDATE(),
    numero_facturacion VARCHAR(50) NOT NULL,
    codigo_cliente INT NOT NULL,

    -- Clave foránea
    CONSTRAINT FK_venta_cliente FOREIGN KEY (codigo_cliente) REFERENCES cliente(codigo_cliente)
);
GO

-- 8. TABLA: detalle_venta (Entidad asociativa)
CREATE TABLE detalle_venta (
    numero_venta INT NOT NULL,
    codigo_producto INT NOT NULL,
    cantidad INT NOT NULL
        CONSTRAINT CHK_cantidad_detalle CHECK (cantidad > 0),

    -- Clave primaria compuesta (un producto solo aparece una vez por venta)
    CONSTRAINT PK_detalle_venta PRIMARY KEY (numero_venta, codigo_producto),

    -- Clave foránea
    CONSTRAINT FK_dv_venta FOREIGN KEY (numero_venta) REFERENCES venta(numero_venta) ON DELETE CASCADE,
    CONSTRAINT FK_dv_producto FOREIGN KEY (codigo_producto) REFERENCES producto(codigo_producto)
);
GO

-- 9. TABLA: metodo_pago
CREATE TABLE metodo_pago (
    codigo_metodo INT IDENTITY(1,1) PRIMARY KEY,
    nombre_metodo VARCHAR(50) NOT NULL UNIQUE
        CONSTRAINT UNQ_nombre_metodo UNIQUE
);
GO

-- 10. TABLA: pago
CREATE TABLE pago (
    codigo_pago INT IDENTITY(1,1) PRIMARY KEY,
    numero_venta INT NOT NULL,
    codigo_metodo INT NOT NULL,
    monto_pagado DECIMAL(10,2) NOT NULL
        CONSTRAINT CHK_monto_pago CHECK (monto_pagado > 0),

    -- Claves foráneas
    CONSTRAINT FK_pago_venta FOREIGN KEY (numero_venta) REFERENCES venta(numero_venta),
    CONSTRAINT FK_pago_metodo FOREIGN KEY (codigo_metodo) REFERENCES metodo_pago(codigo_metodo)
);
GO

-- 11. TABLA: reseña (¡CORREGIDA! Asociada a detalle_venta)
CREATE TABLE reseña (
    numero_venta INT NOT NULL,
    codigo_producto INT NOT NULL,
    calificacion INT NOT NULL
        CONSTRAINT CHK_calificacion_reseña CHECK (calificacion BETWEEN 1 AND 10),
    comentario TEXT NULL,

    -- Clave primaria compuesta (una reseña por producto en una venta)
    CONSTRAINT PK_reseña PRIMARY KEY (numero_venta, codigo_producto),

    -- ¡CLAVE FORÁNEA COMPUESTA A DETALLE_VENTA!
    -- Esto garantiza que solo se pueda reseñar un producto que fue COMPRADO.
    CONSTRAINT FK_reseña_detalle_venta FOREIGN KEY (numero_venta, codigo_producto) 
        REFERENCES detalle_venta(numero_venta, codigo_producto)
        ON DELETE CASCADE,

    -- Nota: No se necesita FK a cliente, porque el cliente se obtiene a través de la venta.
    -- Si se desea, se puede agregar una FK a cliente, pero no es necesaria para la regla de negocio.
);
GO

-- ======================================================
-- LOTE DE PRUEBA (Requerido en el enunciado)
-- ======================================================

-- Insertar Categorías
INSERT INTO categoria_producto (nombre_categoria) VALUES 
('Hogar'),
('Jardín'),
('Decoración');
GO

-- Insertar Materiales
INSERT INTO material_fabricacion (nombre_material) VALUES 
('Madera'),
('Metal'),
('Vidrio'),
('Cerámica');
GO

-- Insertar Vendedores
INSERT INTO vendedor (nombre_completo, cuit, fecha_nacimiento, correo_electronico) VALUES 
('Carlos Gómez', '20-12345678-9', '1985-03-15', 'carlos.gomez@artesano.com'), -- +18
('Ana López', '27-87654321-0', '2000-07-22', 'ana.lopez@artesano.com');     -- +18
GO

-- Insertar Clientes
INSERT INTO cliente (dni, nombre, apellido, domicilio, ciudad, correo_electronico, telefono) VALUES 
('12345678', 'María', 'Fernández', 'Calle 123', 'CABA', 'maria@email.com', '11-1234-5678'),
('87654321', 'Juan', 'Pérez', 'Av. Siempre Viva 742', 'Rosario', 'juan@email.com', NULL); -- Teléfono opcional
GO

-- Insertar Productos
INSERT INTO producto (nombre_producto, descripcion, precio, status, codigo_vendedor, codigo_categoria) VALUES 
('Mesa de Madera', 'Mesa rústica de pino', 15000.00, 'activa', 1, 1),
('Maceta Cerámica', 'Maceta decorativa', 2500.00, 'pausada', 2, 2);
GO

-- Insertar Materiales por Producto
INSERT INTO producto_material (codigo_producto, codigo_material, porcentaje) VALUES 
(1, 1, 80.00), -- Mesa: 80% Madera
(1, 2, 20.00), -- Mesa: 20% Metal
(2, 4, 100.00); -- Maceta: 100% Cerámica
GO

-- Insertar Ventas
INSERT INTO venta (numero_facturacion, codigo_cliente) VALUES 
('FAC-001', 1), -- Venta de María
('FAC-002', 2); -- Venta de Juan
GO

-- Insertar Detalles de Venta
INSERT INTO detalle_venta (numero_venta, codigo_producto, cantidad) VALUES 
(1, 1, 1), -- María compra 1 Mesa
(2, 2, 2); -- Juan compra 2 Macetas
GO

-- Insertar Métodos de Pago
INSERT INTO metodo_pago (nombre_metodo) VALUES 
('Tarjeta de Crédito'),
('Transferencia Bancaria'),
('Efectivo');
GO

-- Insertar Pagos
INSERT INTO pago (numero_venta, codigo_metodo, monto_pagado) VALUES 
(1, 1, 15000.00), -- María paga con tarjeta
(2, 2, 5000.00);   -- Juan paga con transferencia
GO

-- Insertar Reseñas (¡SOLO sobre productos COMPRADOS, gracias a FK a detalle_venta!)
INSERT INTO reseña (numero_venta, codigo_producto, calificacion, comentario) VALUES 
(1, 1, 9, 'Excelente calidad y terminación.'), -- María reseña la Mesa que compró
(2, 2, 7, 'Linda, pero se rompió rápido.');    -- Juan reseña la Maceta que compró
GO

-- ======================================================
-- PRUEBAS DE RESTRICCIONES (Validación requerida)
-- ======================================================

-- ❌ Prueba 1: Status inválido en producto
-- INSERT INTO producto (nombre_producto, precio, status, codigo_vendedor, codigo_categoria)
-- VALUES ('Prueba', 1000.00, 'inactivo', 1, 1); -- ¡ERROR! Violación de CHK_status_producto

-- ❌ Prueba 2: Calificación inválida en reseña
-- INSERT INTO reseña (numero_venta, codigo_producto, calificacion)
-- VALUES (1, 1, 15); -- ¡ERROR! Violación de CHK_calificacion_reseña

-- ❌ Prueba 3: Vendedor menor de 18 años
-- INSERT INTO vendedor (nombre_completo, cuit, fecha_nacimiento, correo_electronico)
-- VALUES ('Menor', '20-99999999-9', '2010-01-01', 'menor@invalid.com'); -- ¡ERROR! Violación de CHK_edad_vendedor

-- ❌ Prueba 4: Teléfono duplicado
-- INSERT INTO cliente (dni, nombre, apellido, domicilio, ciudad, correo_electronico, telefono)
-- VALUES ('11111111', 'Test', 'Duplicado', 'Calle X', 'CABA', 'test1@email.com', '11-1234-5678'); -- ¡ERROR! Violación de UNQ_telefono_cliente

-- ✅ Prueba 5: Teléfono NULL (válido)
INSERT INTO cliente (dni, nombre, apellido, domicilio, ciudad, correo_electronico, telefono)
VALUES ('22222222', 'Test', 'NullPhone', 'Calle Y', 'CABA', 'test2@email.com', NULL);
GO

-- ❌ Prueba 6: Producto duplicado en misma venta
-- INSERT INTO detalle_venta (numero_venta, codigo_producto, cantidad)
-- VALUES (1, 1, 1); -- ¡ERROR! Violación de PK_detalle_venta (ya existe)

-- ✅ Prueba 7: Producto diferente en misma venta
INSERT INTO detalle_venta (numero_venta, codigo_producto, cantidad)
VALUES (1, 2, 1); -- ¡OK! Venta 1 ahora tiene Mesa y Maceta
GO

-- ❌ ❗ PRUEBA CLAVE: Intentar reseñar un producto NO COMPRADO
-- Supongamos que el producto 1 (Mesa) no fue comprado en la venta 2.
-- INSERT INTO reseña (numero_venta, codigo_producto, calificacion)
-- VALUES (2, 1, 8); -- ¡ERROR! Violación de FK_reseña_detalle_venta
-- ¡ESTO ES LO QUE EL PROFESOR QUIERE! La FK compuesta a detalle_venta lo impide.

-- ✅ Prueba 8: Reseña válida (producto comprado en esa venta)
INSERT INTO reseña (numero_venta, codigo_producto, calificacion, comentario)
VALUES (1, 2, 6, 'Buena, pero no tan resistente como la mesa.'); -- ¡OK! Porque (1,2) existe en detalle_venta
GO

-- ======================================================
-- FIN DEL SCRIPT
-- ======================================================
```
